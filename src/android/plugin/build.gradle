apply plugin: 'com.android.library'

android {
    namespace 'plugin.screenRecorder'
    compileSdk 34

    defaultConfig {
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_11
//        targetCompatibility JavaVersion.VERSION_11
//    }

}

dependencies {
    implementation ':Corona@aar'
    implementation 'androidx.appcompat:appcompat:1.6.1'
}

tasks.register("extractPluginJar") {
    group "Solar2Dev"
    dependsOn assembleRelease
    doLast {
        copy {
            from {
                zipTree("$buildDir/outputs/aar/${project.name}-release.aar").matching {
                    include 'classes.jar'
                }.singleFile
            }
            into "$buildDir/outputs/"
            String packageName = new XmlSlurper().parse(file('src/main/AndroidManifest.xml')).@package.text()
            rename "classes.jar", "${packageName}.jar"
        }
    }
}

// This creates archive for plugin so it can be used by Simulator from build.settings
// by deploying it directly to Solar2DPlugins directory. This is first in line location
// to retrieve plugins, so will overshadow online directory/store downloads.
def providerId = 'com.solar2d'
tasks.register("deployToLocalSolar2DRepo", Tar) {
    group "Solar2Dev"

    dependsOn assembleRelease

    File pluginManifestFile = file("src/main/AndroidManifest.xml")
    String manifestContents = pluginManifestFile.text
    def pluginManifestXml = new XmlSlurper().parseText(manifestContents)
    String packageName = pluginManifestXml.@package.toString()

    compression = Compression.GZIP
    archiveFileName = "data.tgz"
    def rootS2DP
    if(System.env.APP_DATA) {
        rootS2DP = System.env.APP_DATA
    } else {
        rootS2DP = System.env.HOME
    }
    def dst = file("$rootS2DP/Solar2DPlugins/$providerId/$packageName/android")
    destinationDirectory = dst

    into("/") {
        from("$buildDir/outputs/aar")
        include("${project.name}-release.aar")
    }
    doLast {
        println("\n\n\n== !!! IMPORTANT !!! ==\nMake sure to delete plugin when done: $dst\nThis plugin will override any Solar2Directory plugin, or plugin from any other source")
    }
}

task deployPluginToDirectory() {
    group "Solar2Dev"
    dependsOn assemble
    doLast {
        copy {
            from {
//                zipTree("$buildDir/outputs/aar/${project.name}-release.aar").matching {
//                    include 'classes.jar'
//                }.singleFile
                "$buildDir/outputs/aar/${project.name}-release.aar"
            }
            into "$buildDir/outputs/../../../../../plugins/2020.3620/android/"

            rename "${project.name}-release.aar", "plugin.screenRecorder.aar"
//            File pluginManifestFile = file("src/main/AndroidManifest.xml")
//            if (pluginManifestFile.exists()) {
//                String manifestContents = pluginManifestFile.text
//                def pluginManifestXml = new XmlSlurper().parseText(manifestContents)
//                String packageName = pluginManifestXml.@package.toString()
//                rename "classes.jar", "${packageName}.jar"
//            } else {
//                rename "classes.jar", "plugin.jar"
//            }
        }
    }
}